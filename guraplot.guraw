#!/usr/bin/env gura
import(wx)
import(plotter)
import(resource)

//-----------------------------------------------------------------------------
// Control ID
//-----------------------------------------------------------------------------
[
	ID_Prompt, ID_AddGraph,
] = wx.ID_HIGHEST..

//-----------------------------------------------------------------------------
// PanelGraph
//-----------------------------------------------------------------------------
PanelGraph = class(wx.Panel) {
	__init__(parent:wx.Window, style:number => 0) = {|parent, style => (style | wx.HSCROLL | wx.VSCROLL)|
		this.brushBg = wx.Brush(wx.Colour(128, 128, 128), wx.BRUSHSTYLE_SOLID)
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_SCROLLWIN) {|event| this.OnScrollWin(event)}
		this.Bind(wx.EVT_MOUSEWHEEL) {|event| this.OnMouseWheel(event)}
		this.imgCanvas = image(`rgba, 600, 600, `white)
		this.cv = plotter.Canvas()
		this.g = this.AddGraph()
		this.RenderCanvas(false)
	}
	AddFuncToCurGraph(f:function) = {
		this.g.func(f)
	}
	AddGraph() = {
		this.cv.graph()
	}
	RenderCanvas(refreshFlag:boolean => true) = {
		this.imgCanvas.fill(`white)
		this.cv.render(this.imgCanvas)
		refreshFlag && this.Refresh()
	}
	OnSize(event:wx.SizeEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		posHorz = this.GetScrollPos(wx.HORIZONTAL)
		posVert = this.GetScrollPos(wx.VERTICAL)
		this.SetScrollbar(wx.HORIZONTAL, posHorz, wdClient, this.imgCanvas.width)
		this.SetScrollbar(wx.VERTICAL, posVert, htClient, this.imgCanvas.height)
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		dc = wx.PaintDC(this)
		if (this.imgCanvas.width < wdClient) {
			x = (wdClient - this.imgCanvas.width) / 2
		} else {
			x = -this.GetScrollPos(wx.HORIZONTAL)
		}
		if (this.imgCanvas.height < htClient) {
			y = (htClient - this.imgCanvas.height) / 2
		} else {
			y = -this.GetScrollPos(wx.VERTICAL)
		}
		this.imgCanvas && dc.DrawBitmap(this.imgCanvas, x, y, false)
		dc = nil
	}
	OnScrollWin(event:wx.ScrollWinEvent) = {
		eventType = event.GetEventType()
		orientation = event.GetOrientation()
		if (eventType == wx.EVT_SCROLLWIN_TOP.GetEventType()) {
			pos = 0
		} elsif (eventType == wx.EVT_SCROLLWIN_BOTTOM.GetEventType()) {
			pos = this.GetScrollRange(orientation)
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 10
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 10
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 100
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 100
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBTRACK.GetEventType()) {
			pos = event.GetPosition()
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBRELEASE.GetEventType()) {
			pos = event.GetPosition()
		}
		this.SetScrollPos(orientation, pos)
		this.Refresh()
	}
	OnMouseWheel(event:wx.MouseEvent) = {
		rot = event.GetWheelRotation()
		axis = event.GetWheelAxis()
		if (axis == 0) {
			orientation = wx.VERTICAL
			pos = this.GetScrollPos(orientation)
			if (rot < 0) {
				this.SetScrollPos(orientation, pos + 20)
				this.Refresh()
			} elsif (rot > 0) {
				this.SetScrollPos(orientation, pos - 20)
				this.Refresh()
			}
		} else {
			orientation = wx.HORIZONTAL
			pos = this.GetScrollPos(orientation)
			if (rot > 0) {
				this.SetScrollPos(orientation, pos + 20)
				this.Refresh()
			} elsif (rot < 0) {
				this.SetScrollPos(orientation, pos - 20)
				this.Refresh()
			}
		}
	}
}

//-----------------------------------------------------------------------------
// PanelMain
//-----------------------------------------------------------------------------
PanelMain = class(wx.Panel) {
	__init__(parent:wx.Window, style:number => 0) = {|parent, style => style|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand())
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			wx.TextCtrl(this, ID_Prompt, style => wx.TE_PROCESS_ENTER) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textCtrlPrompt = ctrl
			}
			wx.Button(this, ID_AddGraph, 'Add Graph') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
			}
		}
		PanelGraph(this) {|panelGraph|
			vbox.Add(panelGraph, wx.SizerFlags(1).Expand())
			this.panelGraph = panelGraph
		}
		this.SetSizer(outerBox)
		this.Bind(wx.EVT_TEXT_ENTER, ID_Prompt) {|event| this.OnTextEnter_Prompt(event)}
		this.Bind(wx.EVT_BUTTON, ID_AddGraph) {|event| this.OnButton_AddGraph(event)}
	}
	OnTextEnter_Prompt(event:wx.CommandEvent) = {
		text = this.textCtrlPrompt.GetValue()
		this.textCtrlPrompt.SetValue('')
		try {
			rtn = expr.parse(text).eval()
			println(rtn)
		} catch {|e|
			println(e.text)
			return
		}
		if (rtn.istype(`function)) {
			this.panelGraph.AddFuncToCurGraph(rtn)
			this.panelGraph.RenderCanvas()
		}
		
	}
	OnButton_AddGraph(event:wx.CommandEvent) = {
		this.panelGraph.AddGraph()
		this.panelGraph.RenderCanvas()
	}
}

//-----------------------------------------------------------------------------
// FrameMain
//-----------------------------------------------------------------------------
FrameMain = class(wx.Frame) {
	__init__(title:string, pos:wx.Point => wx.DefaultPosition,
			size:wx.Size => wx.DefaultSize) = {|nil, wx.ID_ANY, title, pos, size|
		//this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		menuBar = wx.MenuBar()
		this.SetMenuBar(menuBar)
		PanelMain(this)
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		frame = FrameMain('GuraPlot', size => wx.Size(800, 600))
		frame.Show()
		true
	}
}

wx.IMPLEMENT_APP(App)
